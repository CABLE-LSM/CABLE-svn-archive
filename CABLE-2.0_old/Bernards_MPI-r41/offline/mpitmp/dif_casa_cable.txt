diff casa_cable.F90 /home/cmar/lu02b/bCABLE-1.9/core/pkg/CASA/casa_cable.F90
       > dif_casa_cable.txt

15,17c15,17
<                      spinConv, spinup, ktauday, idoy, dump_read, dump_write )
< 
<    USE cable_def_types_mod
---
>                      spinConv,ktauday, idoy, dump_casainput)
>    USE define_dimensions
>    USE define_types
24,31c24,31
<    INTEGER,      INTENT(IN) :: ktau ! integration step number
<    INTEGER,      INTENT(IN) :: kstart ! starting value of ktau
<    INTEGER,      INTENT(IN) :: kend ! total # timesteps in run
<    
<    INTEGER,      INTENT(IN)                  :: idoy ! day of year (1-365)
<    INTEGER,      INTENT(IN)                  :: ktauday
<    logical,      INTENT(IN) :: spinConv, spinup
<    logical,      INTENT(IN) :: dump_read, dump_write 
---
>    INTEGER(i_d),      INTENT(IN) :: ktau ! integration step number
>    INTEGER(i_d),      INTENT(IN) :: kstart ! starting value of ktau
>    INTEGER(i_d),      INTENT(IN) :: kend ! total # timesteps in run
>    
>    INTEGER(i_d),      INTENT(IN)                  :: idoy ! day of year (1-365)
>    INTEGER(i_d),      INTENT(IN)                  :: ktauday
>    logical,      INTENT(IN) :: spinConv
>    logical,      INTENT(IN) :: dump_casainput 
33c33
<    REAL,         INTENT(IN) :: dels ! time setp size (s)
---
>    REAL(r_1),         INTENT(IN) :: dels ! time setp size (s)
44a45,49
>    ! local variavles
>    real,      dimension(mp)      :: cleaf2met, cleaf2str, croot2met, croot2str, cwood2cwd
>    real,      dimension(mp)      :: nleaf2met, nleaf2str, nroot2met, nroot2str, nwood2cwd
>    real,      dimension(mp)      :: pleaf2met, pleaf2str, proot2met, proot2str, pwood2cwd
>    real(r_2), dimension(mp)      :: xnplimit,  xkNlimiting, xklitter, xksoil
46,48d50
<    !    phen%phase = 2
< 
<    if ( .NOT. dump_read ) then
84c86,91
<                     casamet,casabal,phen)
---
>                          casamet,casabal,phen,xnplimit,xkNlimiting,xklitter,xksoil, &
>                          cleaf2met,cleaf2str,croot2met,croot2str,cwood2cwd,         &               
>                          nleaf2met,nleaf2str,nroot2met,nroot2str,nwood2cwd,         &               
>                          pleaf2met,pleaf2str,proot2met,proot2str,pwood2cwd)
>   
>           write(89,*) idoy,spinConv,dump_casainput,casafile%dump_cnpspin
86,87c93,94
<          IF((.NOT.spinup).OR.(spinup.AND.spinConv)) THEN 
<             IF ( dump_write ) &
---
>          if ( spinConv .AND. dump_casainput ) then
>             write(89,*) ' write out casa dump file'
90c97
<                                kend/ktauday )
---
>                             kend/ktauday,casafile%dump_cnpspin )
93a100
> END SUBROUTINE bgcdriver
95d101
<    ELSE 
96a103,111
> subroutine ncdf_dump(tairk, tsoil, moist, &
>                         cgpp, crmplant, &
>                         n_call, kend, ncfile)
>       use netcdf
>       USE define_dimensions
>       use cable_common_module, only : kend_gl
>       use cable_diag_module, only : def_dims, def_vars, def_var_atts, & 
>                                     put_var_nc, stderr_nc
>       USE io_variables, only : patch
97a113,118
>       implicit none  
>       !var (type) to write 
>       real(r_2), dimension(mp), intent(in) :: & 
>          tairk, &
>          cgpp, &
>          crmplant
99,101c120,122
<       IF( mod((ktau-kstart+1),ktauday) == 0 ) & 
<          CALL biogeochem(ktau,dels,idoy,veg,soil,casabiome,casapool,casaflux, &
<                     casamet,casabal,phen)
---
>       real(r_2), dimension(mp,ms), intent(in) :: & 
>          tsoil, &
>          moist
102a124,126
>       integer, intent(in) :: &
>          n_call, &         ! this timestep # 
>          kend              ! final timestep of run
104c128,129
<    ENDIF
---
>       !number of instances. dummied here and so=1 
>       !integer :: inst =1
105a131,134
>       !netcdf IDs/ names 
>       character(len=*) ncfile 
>       integer, parameter :: num_vars=7
>       integer, parameter :: num_dims=3 
106a136,137
>       integer, dimension(ms)     :: &
>          soil
107a139,140
>       integer, dimension(mvtype) :: &
>          tile 
109c142
< eND SUBROUTINE bgcdriver
---
>       integer, save :: ncid       ! netcdf file ID
110a144,152
>       !vars 
>       character(len=*), dimension(num_vars), parameter :: &
>             var_name =  (/  "latitude     ", & 
>                             "longitude    ", & 
>                             "casamet_tairk", & 
>                             "tsoil        ", &
>                             "moist        ", &
>                             "cgpp         ", &
>                             "crmplant     " /)
111a154
>       integer, dimension(num_vars) :: varID ! (1) tvair, (2) pmb 
112a156,160
>       !dims 
>       character(len=*), dimension(num_dims), parameter :: & 
>             dim_name =  (/ "tile", &
>                            "soil", &
>                            "time" /)
113a162,163
>       integer, dimension(num_dims)  :: &
>             dimID   ! (1) x, (2) y, (3) time
114a165,167
>       integer, dimension(num_dims)  :: &
>             !x,y generally lat/lon BUT for single site = 1,1       
>             dim_len 
115a169,170
>       !local only
>       integer :: ncok      !ncdf return status
116a172
>       ! END header
118,212c174,205
<    subroutine ncdf_dump(tairk, tsoil, moist, &
<                         cgpp, crmplant, &
<                         n_call, kend)
< !      use netcdf
< !      use cable_common_module, only : kend_gl
< !      use cable_diag_module, only : def_dims, def_vars, def_var_atts, & 
< !                                    put_var_nc, stderr_nc
< !
< !      implicit none  
< !      !var (type) to write 
< !      real(r_2), dimension(mp), intent(in) :: & 
< !         tairk, &
< !         cgpp, &
< !         crmplant
< !
< !      real(r_2), dimension(mp,ms), intent(in) :: & 
< !         tsoil, &
< !         moist
< !      
< !      integer, intent(in) :: &
< !         n_call, &         ! this timestep # 
< !         kend              ! final timestep of run
< !
< !     
< !      !number of instances. dummied here and so=1 
< !      !integer :: inst =1
< !
< !      !netcdf IDs/ names 
< !      character(len=*), parameter :: ncfile = "CASA_dump.nc"
< !      integer, parameter :: num_vars=5 
< !      integer, parameter :: num_dims=4 
< !      integer, save :: ncid       ! netcdf file ID
< !      
< !      !vars 
< !      character(len=*), dimension(num_vars), parameter :: &
< !            var_name =  (/  "casamet_tairk", & 
< !                            "tsoil        ", &
< !                            "moist        ", &
< !                            "cgpp         ", &
< !                            "crmplant     " /)
< !
< !      integer, dimension(num_vars) :: varID ! (1) tvair, (2) pmb 
< !      
< !      !dims 
< !      character(len=*), dimension(num_dims), parameter :: & 
< !            dim_name =  (/ "lat ", &
< !                           "lon ", &
< !                           "soil", &
< !                           "time" /)
< !      
< !      integer, parameter :: soil_dim = 6
< !            
< !      integer, dimension(soil_dim), parameter  :: soil = (/ 1,2,3,4,5,6 /)
< !      
< !      integer, dimension(num_dims)  :: &
< !            dimID   ! (1) x, (2) y, (3) time
< !      
< !      integer, dimension(num_dims)  :: &
< !            !x,y generally lat/lon BUT for single site = 1,1       
< !            dim_len = (/1,1,soil_dim,-1/)  ! (1) x, (2) y, (3) soil, (4) time [re-set] 
< !      
< !      
< !      !local only
< !      integer :: ncok      !ncdf return status
< !      
< !      ! END header
< !
< !      dim_len(num_dims) = kend
< !
< !      if (n_call == 1) then
< !         ! create netCDF dataset: enter define mode
< !         ncok = nf90_create(path = ncfile, cmode = nf90_noclobber, ncid = ncid)
< !            if (ncok /= nf90_noerr) call stderr_nc('ncdf creating ', ncfile) 
< !      
< !            ! define dimensions: from name and length
< !            call def_dims(num_dims, ncid, dimID, dim_len, dim_name )
< !     
< !            ! define variables: from name, type, dims
< !            call def_vars(num_vars, ncid,  nf90_float, dimID, var_name, varID )
< !      
< !            ! define variable attributes
< !            call def_var_atts(ncfile, ncid, varID )
< !               
< !            ncok = nf90_enddef(ncid) 
< !         
< !      endif 
< !      
< !      call put_var_nc(ncid, var_name(1), tairk, n_call )
< !      call put_var_nc(ncid, var_name(2), tsoil, n_call )
< !      call put_var_nc(ncid, var_name(3), moist, n_call )
< !      call put_var_nc(ncid, var_name(4), cgpp, n_call )
< !      call put_var_nc(ncid, var_name(5), crmplant, n_call )
< !      
< !      if (n_call == kend ) & 
< !         ncok = nf90_close(ncid)            ! close: save new netCDF dataset
---
>       dim_len(1) = mp
>       dim_len(2) = ms
>       dim_len(3) = kend
> 
>       if (n_call == 1) then
>          ! create netCDF dataset: enter define mode
>          ncok = nf90_create(path = ncfile, cmode = nf90_noclobber, ncid = ncid)
>             if (ncok /= nf90_noerr) call stderr_nc('ncdf creating ', ncfile) 
>       
>             ! define dimensions: from name and length
>             call def_dims(num_dims, ncid, dimID, dim_len, dim_name )
>      
>             ! define variables: from name, type, dims
>             call def_vars(num_vars, ncid,  nf90_float, dimID, var_name, varID )
>       
>             ! define variable attributes
>             call def_var_atts(ncfile, ncid, varID )
>                
>             ncok = nf90_enddef(ncid) 
>          
>          call put_var_nc(ncid, var_name(1), patch(:)%latitude )
>          call put_var_nc(ncid, var_name(2), patch(:)%longitude )
>       endif 
>       
>       call put_var_nc(ncid, var_name(3), tairk, n_call )
>       call put_var_nc(ncid, var_name(4), tsoil, n_call )
>       call put_var_nc(ncid, var_name(5), moist, n_call )
>       call put_var_nc(ncid, var_name(6), cgpp, n_call )
>       call put_var_nc(ncid, var_name(7), crmplant, n_call )
>       
>       if (n_call == kend ) & 
>          ncok = nf90_close(ncid)            ! close: save new netCDF dataset
217,254c210,246
<    subroutine read_casa_dump( casamet, casaflux, ktau, kend )
< !      use netcdf
< !      USE casa_cnp_module  
< !      use cable_diag_module, only : get_var_nc, stderr_nc
< !
< !      TYPE (casa_flux), intent(inout) :: casaflux
< !      TYPE (casa_met), intent(inout)  :: casamet
< !      integer, intent(in) :: kend, ktau 
< !
< !
< !      !netcdf IDs/ names 
< !      character(len=*), parameter :: ncfile = "CASA_dump.nc"
< !      integer, parameter :: num_vars=5
< !      integer, parameter :: num_dims=4
< !      integer:: ncid       ! netcdf file ID
< ! 
< !      !vars 
< !      character(len=*), dimension(num_vars), parameter :: &
< !            var_name =  (/  "casamet_tairk", & 
< !                            "tsoil        ", &
< !                            "moist        ", &
< !                            "cgpp         ", &
< !                            "crmplant     " /)
< !
< !      integer, dimension(num_vars) :: varID ! (1) tvair, (2) pmb 
< !      
< !      ncok = NF90_OPEN(ncfile, nf90_nowrite, ncid)           
< !         if (ncok /= nf90_noerr ) call stderr_nc('re-opening ', ncfile)      
< !
< !      call get_var_nc(ncid, var_name(1), casamet%tairk,ktau, kend )
< !      call get_var_nc(ncid, var_name(2), casamet%tsoil,ktau, kend )
< !      call get_var_nc(ncid, var_name(3), casamet%moist,ktau, kend )
< !      call get_var_nc(ncid, var_name(4), casaflux%cgpp,ktau, kend )
< !      call get_var_nc(ncid, var_name(5), casaflux%crmplant, ktau, kend )
< !      
< !      ncok = NF90_CLOSE(ncid)            
< !         if (ncok /= nf90_noerr ) call stderr_nc('closing ', ncfile)      
< !      
---
>    subroutine read_casa_dump(ncfile, casamet, casaflux, ktau, kend)
>       use netcdf
>       USE casa_cnp_module  
>       use cable_diag_module, only : get_var_nc, stderr_nc
> 
>       TYPE (casa_flux), intent(inout) :: casaflux
>       TYPE (casa_met), intent(inout)  :: casamet
>       integer, intent(in) :: kend, ktau 
> 
>       !netcdf IDs/ names 
>       character(len=*)  ncfile 
>       integer, parameter :: num_vars=5
>       integer, parameter :: num_dims=4
>       integer:: ncid       ! netcdf file ID
>  
>       !vars 
>       character(len=*), dimension(num_vars), parameter :: &
>             var_name =  (/  "casamet_tairk", & 
>                             "tsoil        ", &
>                             "moist        ", &
>                             "cgpp         ", &
>                             "crmplant     " /)
> 
>       integer, dimension(num_vars) :: varID ! (1) tvair, (2) pmb 
>       
>       ncok = NF90_OPEN(ncfile, nf90_nowrite, ncid)           
>          if (ncok /= nf90_noerr ) call stderr_nc('re-opening ', ncfile)      
> 
>       call get_var_nc(ncid, var_name(1), casamet%tairk,ktau, kend )
>       call get_var_nc(ncid, var_name(2), casamet%tsoil,ktau, kend )
>       call get_var_nc(ncid, var_name(3), casamet%moist,ktau, kend )
>       call get_var_nc(ncid, var_name(4), casaflux%cgpp,ktau, kend )
>       call get_var_nc(ncid, var_name(5), casaflux%crmplant, ktau, kend )
>       
>       ncok = NF90_CLOSE(ncid)            
>          if (ncok /= nf90_noerr ) call stderr_nc('closing ', ncfile)      
>       
260c252,253
<   USE cable_def_types_mod
---
>   USE define_dimensions
>   USE define_types
265c258
<   INTEGER,      INTENT(IN) :: ktau ! integration step number
---
>   INTEGER(i_d),      INTENT(IN) :: ktau ! integration step number
270,272c263,266
<   real, dimension(17)                   ::  nintercept,nslope,xnslope
<   data nintercept/6.32,4.19,6.32,5.73,14.71,6.42,2.00,14.71,4.71,14.71,14.71,7.00,14.71,14.71,14.71,14.71,14.71/
<   data nslope/18.15,26.19,18.15,29.81,23.15,40.96,8.00,23.15,59.23,23.15,23.15,10.00,23.15,23.15,23.15,23.15,23.15/
---
>   ! move the variables nintercept and nslope to input data file yp wang 8/may/2012
>   ! real, dimension(17)                   ::  nintercept,nslope,xnslope
>   ! data nintercept/6.32,4.19,6.32,5.73,14.71,6.42,2.00,14.71,4.71,14.71,14.71,7.00,14.71,14.71,14.71,14.71,14.71/
>   ! data nslope/18.15,26.19,18.15,29.81,23.15,40.96,8.00,23.15,59.23,23.15,23.15,10.00,23.15,23.15,23.15,23.15,23.15/
282c276,278
<   data xnslope/1.00,1.00,2.00,1.00,1.00,1.00,1.00,1.00,0.34,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00/
---
>   ! data xnslope/1.00,1.00,2.00,1.00,1.00,1.00,1.00,1.00,0.34,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00/
> 
>   ! end yp wang 8/may/2012
307,308c303,304
<         veg%vcmax(np) = ( nintercept(ivt) &
<                         + nslope(ivt)*ncleafx(np)/casabiome%sla(ivt) ) * 1.0e-6
---
>         veg%vcmax(np) = ( casabiome%nintercept(ivt) &
>                         + casabiome%nslope(ivt)*ncleafx(np)/casabiome%sla(ivt) ) * 1.0e-6
311,312c307,308
<           veg%vcmax(np) = ( nintercept(ivt)  &
<                           + nslope(ivt)*(0.4+9.0/npleafx(np)) &
---
>           veg%vcmax(np) = ( casabiome%nintercept(ivt)  &
>                           + casabiome%nslope(ivt)*(0.4+9.0/npleafx(np)) &
315,316c311,312
<           veg%vcmax(np) = ( nintercept(ivt) &
<                           + nslope(ivt)*ncleafx(np)/casabiome%sla(ivt) )*1.0e-6
---
>           veg%vcmax(np) = ( casabiome%nintercept(ivt) &
>                           + casabiome%nslope(ivt)*ncleafx(np)/casabiome%sla(ivt) )*1.0e-6
319c315,318
<       veg%vcmax(np) = veg%vcmax(np) * xnslope(ivt)
---
>      ! yp wang 8/may/2012
>      ! comment out, as the value have been multiplied into "nintercept" and "nslope" in the input file 
>      ! veg%vcmax(np) = veg%vcmax(np) * xnslope(ivt)
>      ! end yp wang 8/may/2012
338a338
> ! added mvtype and mstype to define_dimensions (BP sep2010)
342,343c342,344
<   USE cable_def_types_mod
<   USE cable_carbon_module
---
>   USE define_dimensions
>   USE define_types
>   USE carbon_module
348,353c349,354
<   INTEGER, INTENT(IN)    :: ktau ! integration step number
<   INTEGER, INTENT(IN)    :: kstart ! starting value of ktau
<   INTEGER, INTENT(IN)    :: kend ! total # timesteps in run
< !  INTEGER, INTENT(IN)    :: mvtype  ! Number of veg types
< !  INTEGER, INTENT(IN)    :: mstype ! Number of soil types
<   REAL,    INTENT(IN)    :: dels ! time setp size (s)
---
>   INTEGER(i_d), INTENT(IN)    :: ktau ! integration step number
>   INTEGER(i_d), INTENT(IN)    :: kstart ! starting value of ktau
>   INTEGER(i_d), INTENT(IN)    :: kend ! total # timesteps in run
> !  INTEGER(i_d), INTENT(IN)    :: mvtype  ! Number of veg types
> !  INTEGER(i_d), INTENT(IN)    :: mstype ! Number of soil types
>   REAL(r_1),    INTENT(IN)    :: dels ! time setp size (s)
366a368
> ! mvtype and mstype are now declared in define_dimensions (BP sep2010)
446,447c448,450
<   USE cable_def_types_mod
<   USE cable_carbon_module
---
>   USE define_dimensions 
>   USE define_types
>   USE carbon_module
453,456c456,459
<   REAL,    INTENT(IN)    :: dels
<   INTEGER, INTENT(IN)    :: kstart
<   INTEGER, INTENT(IN)    :: kend
<   INTEGER, INTENT(IN)    :: mloop
---
>   REAL(r_1),    INTENT(IN)    :: dels
>   INTEGER(i_d), INTENT(IN)    :: kstart
>   INTEGER(i_d), INTENT(IN)    :: kend
>   INTEGER(i_d), INTENT(IN)    :: mloop
467,471c470,487
<   REAL, DIMENSION(:,:,:), ALLOCATABLE   :: xtsoil,xmoist
<   REAL, DIMENSION(:,:),   ALLOCATABLE   :: xcgpp,xcrmleaf
<   REAL, DIMENSION(:,:),   ALLOCATABLE   :: xtairk
<   INTEGER :: ktauday,nloop,idoy,nday,ktaux,ktauy
<   REAL    :: xlai
---
>   real,      dimension(:), allocatable, save  :: avg_cleaf2met, avg_cleaf2str, avg_croot2met, avg_croot2str, avg_cwood2cwd
>   real,      dimension(:), allocatable, save  :: avg_nleaf2met, avg_nleaf2str, avg_nroot2met, avg_nroot2str, avg_nwood2cwd
>   real,      dimension(:), allocatable, save  :: avg_pleaf2met, avg_pleaf2str, avg_proot2met, avg_proot2str, avg_pwood2cwd
>   real,      dimension(:), allocatable, save  :: avg_cgpp,      avg_cnpp,      avg_nuptake,   avg_puptake
>   real,      dimension(:), allocatable, save  :: avg_nsoilmin,  avg_psoillab,  avg_psoilsorb, avg_psoilocc
>   real(r_2), dimension(:), allocatable, save  :: avg_xnplimit,  avg_xkNlimiting,avg_xklitter, avg_xksoil
> 
>   ! local variables
>   INTEGER(i_d)                  :: ktau,ktauday,nday,idoy,ktaux,ktauy,nloop
>   INTEGER(i_d), save            :: ndays
>   real,      dimension(mp)      :: cleaf2met, cleaf2str, croot2met, croot2str, cwood2cwd
>   real,      dimension(mp)      :: nleaf2met, nleaf2str, nroot2met, nroot2str, nwood2cwd
>   real,      dimension(mp)      :: pleaf2met, pleaf2str, proot2met, proot2str, pwood2cwd
>   real,      dimension(mp)      :: xcgpp,     xcnpp,     xnuptake,  xpuptake
>   real,      dimension(mp)      :: xnsoilmin, xpsoillab, xpsoilsorb,xpsoilocc
>   real(r_2), dimension(mp)      :: xnplimit,  xkNlimiting, xklitter, xksoil
> 
>   integer nptx
475,478d490
<   PRINT *, 'nday mp ms ',nday,kend,kstart,mp,ms
<   ALLOCATE(xtsoil(nday,mp,ms),xmoist(nday,mp,ms))
<   ALLOCATE(xcgpp(nday,mp),xcrmleaf(nday,mp))
<   ALLOCATE(xtairk(nday,mp))
480c492,507
<   OPEN(111,file=casafile%cnpmetin)
---
>      allocate(avg_cleaf2met(mp), avg_cleaf2str(mp), avg_croot2met(mp), avg_croot2str(mp), avg_cwood2cwd(mp), &
>               avg_nleaf2met(mp), avg_nleaf2str(mp), avg_nroot2met(mp), avg_nroot2str(mp), avg_nwood2cwd(mp), &
>               avg_pleaf2met(mp), avg_pleaf2str(mp), avg_proot2met(mp), avg_proot2str(mp), avg_pwood2cwd(mp), &
>                avg_cgpp(mp),      avg_cnpp(mp),      avg_nuptake(mp),   avg_puptake(mp),                     &
>               avg_xnplimit(mp),  avg_xkNlimiting(mp), avg_xklitter(mp), avg_xksoil(mp),                      &
>               avg_nsoilmin(mp),  avg_psoillab(mp),    avg_psoilsorb(mp), avg_psoilocc(mp))
> 
> 
>   ! compute the mean fluxes and residence time of each carbon pool
>      avg_cleaf2met=0.0; avg_cleaf2str=0.0; avg_croot2met=0.0; avg_croot2str=0.0; avg_cwood2cwd=0.0
>      avg_nleaf2met=0.0; avg_nleaf2str=0.0; avg_nroot2met=0.0; avg_nroot2str=0.0; avg_nwood2cwd=0.0
>      avg_pleaf2met=0.0; avg_pleaf2str=0.0; avg_proot2met=0.0; avg_proot2str=0.0; avg_pwood2cwd=0.0
>      avg_cgpp=0.0;      avg_cnpp=0.0;      avg_nuptake=0.0;   avg_puptake=0.0
>      avg_xnplimit=0.0;  avg_xkNlimiting=0.0; avg_xklitter=0.0; avg_xksoil=0.0
>      avg_nsoilmin=0.0;  avg_psoillab=0.0;    avg_psoilsorb=0.0; avg_psoilocc=0.0
> 
482,483c509,562
<     READ(111,*) ktaux,xlai,xtairk(idoy,:),xtsoil(idoy,:,:),xmoist(idoy,:,:), &
<                 xcgpp(idoy,:),xcrmleaf(idoy,:)
---
>        ktau=(idoy-1)*ktauday +1
>        CALL read_casa_dump(casafile%cnpspin, casamet, casaflux, idoy, kend/ktauday )
> 
> !       casamet%tairk(:)   = casa_tairk(:,idoy)
> !       casamet%tsoil(:,:) = casa_tsoil(:,:,idoy)
> !       casamet%moist(:,:) = casa_moist(:,:,idoy)
> !       casaflux%cgpp(:)   = casa_cgpp(:,idoy)
> !       casaflux%crmplant(:,leaf) = casa_crmleaf(:,idoy)
> !        write(517,*),'before biogeochem:xkNlimiting(39:40),casaflux%cgpp(39:40),casafllux%crmplant(39:40,1:3)',xkNlimiting(39:40),casaflux%cgpp(39:40),casaflux%crmplant(39:40,:)
> 
>        CALL biogeochem(ktau,dels,idoy,veg,soil,casabiome,casapool,casaflux, &
>                     casamet,casabal,phen,xnplimit,xkNlimiting,xklitter,xksoil, &
>                     cleaf2met,cleaf2str,croot2met,croot2str,cwood2cwd,         &               
>                     nleaf2met,nleaf2str,nroot2met,nroot2str,nwood2cwd,         &               
>                     pleaf2met,pleaf2str,proot2met,proot2str,pwood2cwd)
>    
> !        write(517,*),'after biogeochem:xkNlimiting(39:40),casaflux%cgpp(39:40),casafllux%crmplant(39:40,1:3)',xkNlimiting(39:40),casaflux%cgpp(39:40),casaflux%crmplant(39:40,:)
>         WHERE(xkNlimiting .eq. 0)  !Chris Lu 4/June/2012
>            xkNlimiting = 0.001
>         END WHERE
>         nptx=8173
> 
>         avg_cleaf2met = avg_cleaf2met + cleaf2met
>         avg_cleaf2str = avg_cleaf2str + cleaf2str
>         avg_croot2met = avg_croot2met + croot2met 
>         avg_croot2str = avg_croot2str + croot2str
>         avg_cwood2cwd = avg_cwood2cwd + cwood2cwd
> 
>         avg_nleaf2met = avg_nleaf2met + nleaf2met
>         avg_nleaf2str = avg_nleaf2str + nleaf2str
>         avg_nroot2met = avg_nroot2met + nroot2met 
>         avg_nroot2str = avg_nroot2str + nroot2str
>         avg_nwood2cwd = avg_nwood2cwd + nwood2cwd
> 
>         avg_pleaf2met = avg_pleaf2met + pleaf2met
>         avg_pleaf2str = avg_pleaf2str + pleaf2str
>         avg_proot2met = avg_proot2met + proot2met 
>         avg_proot2str = avg_proot2str + proot2str
>         avg_pwood2cwd = avg_pwood2cwd + pwood2cwd
> 
>         avg_cgpp      = avg_cgpp      + casaflux%cgpp      
>         avg_cnpp      = avg_cnpp      + casaflux%cnpp      
>         avg_nuptake   = avg_nuptake   + casaflux%Nminuptake   
>         avg_puptake   = avg_puptake   + casaflux%Plabuptake
> 
>         avg_xnplimit    = avg_xnplimit    + xnplimit  
>         avg_xkNlimiting = avg_xkNlimiting + xkNlimiting
>         avg_xklitter    = avg_xklitter    + xklitter
>         avg_xksoil      = avg_xksoil      + xksoil
> 
>         avg_nsoilmin    = avg_nsoilmin    + casapool%nsoilmin 
>         avg_psoillab    = avg_psoillab    + casapool%psoillab 
>         avg_psoilsorb   = avg_psoilsorb   + casapool%psoilsorb
>         avg_psoilocc    = avg_psoilocc    + casapool%psoilocc
485c564,605
<   close(111)
---
> 
>     avg_cleaf2met = avg_cleaf2met/real(nday)
>     avg_cleaf2str = avg_cleaf2str/real(nday)
>     avg_croot2met = avg_croot2met/real(nday)
>     avg_croot2str = avg_croot2str/real(nday)
>     avg_cwood2cwd = avg_cwood2cwd/real(nday)
> 
>     avg_nleaf2met = avg_nleaf2met/real(nday)
>     avg_nleaf2str = avg_nleaf2str/real(nday)
>     avg_nroot2met = avg_nroot2met/real(nday)
>     avg_nroot2str = avg_nroot2str/real(nday)
>     avg_nwood2cwd = avg_nwood2cwd/real(nday)
> 
>     avg_pleaf2met = avg_pleaf2met/real(nday)
>     avg_pleaf2str = avg_pleaf2str/real(nday)
>     avg_proot2met = avg_proot2met/real(nday)
>     avg_proot2str = avg_proot2str/real(nday)
>     avg_pwood2cwd = avg_pwood2cwd/real(nday)
> 
>     avg_cgpp      = avg_cgpp/real(nday)    
>     avg_cnpp      = avg_cnpp/real(nday)    
>     avg_nuptake   = avg_nuptake/real(nday) 
>     avg_puptake   = avg_puptake/real(nday)
> 
>     avg_xnplimit    = avg_xnplimit/real(nday)  
>     avg_xkNlimiting = avg_xkNlimiting/real(nday)
>     avg_xklitter    = avg_xklitter/real(nday)
>     avg_xksoil      = avg_xksoil/real(nday)
> 
>     avg_nsoilmin    = avg_nsoilmin/real(nday)
>     avg_psoillab    = avg_psoillab/real(nday)
>     avg_psoilsorb   = avg_psoilsorb/real(nday)
>     avg_psoilocc    = avg_psoilocc/real(nday)
> 
>     call analyticpool(kend,veg,soil,casabiome,casapool,                                          &
>                           casaflux,casamet,casabal,phen,                                         &
>                           avg_cleaf2met,avg_cleaf2str,avg_croot2met,avg_croot2str,avg_cwood2cwd, &
>                           avg_nleaf2met,avg_nleaf2str,avg_nroot2met,avg_nroot2str,avg_nwood2cwd, &
>                           avg_pleaf2met,avg_pleaf2str,avg_proot2met,avg_proot2str,avg_pwood2cwd, &
>                           avg_cgpp, avg_cnpp, avg_nuptake, avg_puptake,                          &
>                           avg_xnplimit,avg_xkNlimiting,avg_xklitter,avg_xksoil,                      &
>                           avg_nsoilmin,avg_psoillab,avg_psoilsorb,avg_psoilocc)
490,494c610
<       casamet%tairk(:)=xtairk(idoy,:)
<       casamet%tsoil(:,:)=xtsoil(idoy,:,:)
<       casamet%moist(:,:)=xmoist(idoy,:,:)
<       casaflux%cgpp(:) = xcgpp(idoy,:)
<       casaflux%crmplant(:,leaf) =xcrmleaf(idoy,:)
---
>       CALL read_casa_dump(casafile%cnpspin, casamet, casaflux, idoy, kend )
496c612,615
<                       casamet,casabal,phen)
---
>                       casamet,casabal,phen,xnplimit,xkNlimiting,xklitter,xksoil, &
>                       cleaf2met,cleaf2str,croot2met,croot2str,cwood2cwd,         &               
>                       nleaf2met,nleaf2str,nroot2met,nroot2str,nwood2cwd,         &               
>                       pleaf2met,pleaf2str,proot2met,proot2str,pwood2cwd)
498,500c617,619
<     IF((nloop+10)>mloop) THEN
<       WRITE(*,151), nloop, casapool%cplant,casapool%clitter,casapool%csoil
<     ENDIF
---
> !    IF((nloop+10)>mloop) THEN
> !      WRITE(*,151), nloop, casapool%cplant,casapool%clitter,casapool%csoil
> !    ENDIF
503a623,822
> 
> 
> 
>   SUBROUTINE analyticpool(kend,veg,soil,casabiome,casapool,                                 &
>                           casaflux,casamet,casabal,phen,                                    &
>                           avgcleaf2met,avgcleaf2str,avgcroot2met,avgcroot2str,avgcwood2cwd, &
>                           avgnleaf2met,avgnleaf2str,avgnroot2met,avgnroot2str,avgnwood2cwd, &
>                           avgpleaf2met,avgpleaf2str,avgproot2met,avgproot2str,avgpwood2cwd, &
>                           avgcgpp, avgcnpp, avgnuptake, avgpuptake,                         &
>                           avgxnplimit,avgxkNlimiting,avgxklitter,avgxksoil,                     &
>                           avgnsoilmin,avgpsoillab,avgpsoilsorb,avgpsoilocc)
>   USE define_dimensions 
>   USE define_types
>   USE carbon_module
>   USE casadimension
>   USE casaparm
>   USE casavariable
>   USE phenvariable
>   IMPLICIT NONE
>   INTEGER(i_d), INTENT(IN)    :: kend
>   TYPE (veg_parameter_type),    INTENT(INOUT) :: veg  ! vegetation parameters
>   TYPE (soil_parameter_type),   INTENT(INOUT) :: soil ! soil parameters  
>   TYPE (casa_biome),            INTENT(INOUT) :: casabiome
>   TYPE (casa_pool),             INTENT(INOUT) :: casapool
>   TYPE (casa_flux),             INTENT(INOUT) :: casaflux
>   TYPE (casa_met),              INTENT(INOUT) :: casamet
>   TYPE (casa_balance),          INTENT(INOUT) :: casabal
>   TYPE (phen_variable),         INTENT(INOUT) :: phen
> 
> 
>   ! local variables
>   real, dimension(mp)      :: avgcleaf2met,avgcleaf2str,avgcroot2met,avgcroot2str,avgcwood2cwd
>   real, dimension(mp)      :: avgnleaf2met,avgnleaf2str,avgnroot2met,avgnroot2str,avgnwood2cwd
>   real, dimension(mp)      :: avgpleaf2met,avgpleaf2str,avgproot2met,avgproot2str,avgpwood2cwd
>   real, dimension(mp)      :: avgcgpp, avgcnpp, avgnuptake, avgpuptake
>   real(r_2), dimension(mp) :: avgxnplimit,avgxkNlimiting,avgxklitter,avgxksoil
>   real,      dimension(mp) :: avgnsoilmin,avgpsoillab,avgpsoilsorb,avgpsoilocc
> 
>   ! local variables
>   REAL(r_2), DIMENSION(mso) :: Psorder,pweasoil,xpsoil50
>   REAL(r_2), DIMENSION(mso) :: fracPlab,fracPsorb,fracPocc,fracPorg
>   REAL(r_2), DIMENSION(mp)  :: totpsoil
>   INTEGER  npt,nout,nso
> 
>   ! Soiltype     soilnumber soil P(g P/m2)
>   ! Alfisol	1	61.3
>   ! Andisol	2	103.9
>   ! Aridisol	3	92.8
>   ! Entisol	4	136.9
>   ! Gellisol	5	98.2
>   ! Histosol	6	107.6
>   ! Inceptisol	7	84.1
>   ! Mollisol	8	110.1
>   ! Oxisol	9	35.4	
>   ! Spodosol	10	41.0	
>   ! Ultisol	11	51.5	
>   ! Vertisol	12	190.6
>   DATA psorder/61.3,103.9,92.8,136.9,98.2,107.6,84.1,110.1,35.4,41.0,51.5,190.6/
>   DATA pweasoil/0.05,0.04,0.03,0.02,0.01,0.009,0.008,0.007,0.006,0.005,0.004,0.003/
>   DATA fracpLab/0.08,0.08,0.10,0.02,0.08,0.08,0.08,0.06,0.02,0.05,0.09,0.05/
>   DATA fracPsorb/0.32,0.37,0.57,0.67,0.37,0.37,0.37,0.32,0.24,0.22,0.21,0.38/
>   DATA fracPocc/0.36,0.38,0.25,0.26,0.38,0.38,0.38,0.44,0.38,0.38,0.37,0.45/
>   DATA fracPorg/0.25,0.17,0.08,0.05,0.17,0.17,0.17,0.18,0.36,0.35,0.34,0.12/
>   DATA xpsoil50/7.6,4.1,4.2,3.4,4.1,4.1,4.8,4.1,6.9,6.9,6.9,1.7/
> 
>   INTEGER :: nyear,iyear
>   real year
> 
>   ! compute the mean litter input in g(C, N and P)/day from plant pools
>   casaflux%fromLtoS = 0.0
>   casaflux%fromStoS = 0.0
> 
>   casabal%sumcbal(:)   = 0.0
>   casabal%sumnbal(:)   = 0.0
>   casabal%sumpbal(:)   = 0.0
>    
> !  write(517,*),'before analyticpool:casaflux%klitter(39:40,1:3),casa%ksoil(39:40,1:3),avgxkNlimiting(39:40),avgxklitter(39:40),casabiome%fracLigninplant(veg%iveg(39:40),1:3),casapool%clitter(39:40,1:3),casa%csoil%(39:40,1:3)',casaflux%klitter(39:40,1:3),casaflux%ksoil(39:40,1:3),avgxkNlimiting(39:40),avgxklitter(39:40),casabiome%fracLigninplant(veg%iveg(39:40),1:3),casapool%clitter(39:40,:),casapool%csoil(39:40,:)
>   do npt=1,mp                    
>   if(casamet%iveg2(npt)/=icewater.and.avgcnpp(npt) > 0.0) THEN
>     casaflux%fromLtoS(npt,mic,metb)   = 0.45                                  
>                                           ! metb -> mic
>     casaflux%fromLtoS(npt,mic,str)   = 0.45*(1.0-casabiome%fracLigninplant(veg%iveg(npt),leaf))  
>                                           ! str -> mic
>     casaflux%fromLtoS(npt,slow,str)  = 0.7 * casabiome%fracLigninplant(veg%iveg(npt),leaf)       
>                                           ! str -> slow
>     casaflux%fromLtoS(npt,mic,cwd)   = 0.40*(1.0 - casabiome%fracLigninplant(veg%iveg(npt),wood)) 
>                                           ! CWD -> fmic
>     casaflux%fromLtoS(npt,slow,cwd)  = 0.7 * casabiome%fracLigninplant(veg%iveg(npt),wood)        
>                                           ! CWD -> slow
> !! set the following two backflow to set (see Bolker 199x)
> !    casaflux%fromStoS(npt,mic,slow)  = 0.45 * (0.997 - 0.009 *soil%clay(npt))
> !    casaflux%fromStoS(npt,mic,pass)  = 0.45
> 
>     casaflux%fromStoS(npt,slow,mic)  = (0.85 - 0.68 * (soil%clay(npt)+soil%silt(npt))) &
>                                      * (0.997 - 0.032*soil%clay(npt))
>     casaflux%fromStoS(npt,pass,mic)  = (0.85 - 0.68 * (soil%clay(npt)+soil%silt(npt))) &
>                                      * (0.003 + 0.032*soil%clay(npt))
>     casaflux%fromStoS(npt,pass,slow) = 0.45 * (0.003 + 0.009 * soil%clay(npt) ) 
> 
>     casaflux%klitter(npt,metb) = avgxkNlimiting(npt) * avgxklitter(npt)*casabiome%litterrate(veg%iveg(npt),metb) 
>     casaflux%klitter(npt,str)  = avgxkNlimiting(npt) * avgxklitter(npt)*casabiome%litterrate(veg%iveg(npt),str)&
>                                * exp(-3.0*casabiome%fracLigninplant(veg%iveg(npt),leaf))
>     casaflux%klitter(npt,cwd)  = avgxkNlimiting(npt) * avgxklitter(npt)*casabiome%litterrate(veg%iveg(npt),cwd)
> 
>     casaflux%ksoil(npt,mic)    = avgxksoil(npt)*casabiome%soilrate(veg%iveg(npt),mic)  &
>                                * (1.0 - 0.75 *(soil%silt(npt)+soil%clay(npt)))
>     casaflux%ksoil(npt,slow)   = avgxksoil(npt) * casabiome%soilrate(veg%iveg(npt),slow)
>     casaflux%ksoil(npt,pass)   = avgxksoil(npt) * casabiome%soilrate(veg%iveg(npt),pass)
> 
>     if(veg%iveg(npt)==cropland) THEN     ! for cultivated land type
>        casaflux%ksoil(npt,mic)  = casaflux%ksoil(npt,mic) * 1.25
>        casaflux%ksoil(npt,slow) = casaflux%ksoil(npt,slow)* 1.5
>        casaflux%ksoil(npt,pass) = casaflux%ksoil(npt,pass)* 1.5 
>     endif
> 
>   endif
>   enddo
> 
> 
>   do npt=1,mp
>    if(casamet%iveg2(npt)/=icewater.and.avgcnpp(npt) > 0.0) then
>     ! compute steady-state litter and soil C pool sizes
>      casapool%clitter(npt,metb) = (avgcleaf2met(npt)+avgcroot2met(npt))/casaflux%klitter(npt,metb)
>      casapool%clitter(npt,str) = (avgcleaf2str(npt)+avgcroot2str(npt))/casaflux%klitter(npt,str)
>      casapool%clitter(npt,cwd) = (avgcwood2cwd(npt))/casaflux%klitter(npt,cwd)
>      casapool%csoil(npt,mic)   = (casaflux%fromLtoS(npt,mic,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb)   &
>                                  +casaflux%fromLtoS(npt,mic,str) *casaflux%klitter(npt,str)*casapool%clitter(npt,str)  &
>                                  +casaflux%fromLtoS(npt,mic,cwd) *casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) ) &
>                                /casaflux%ksoil(npt,mic) 
>       casapool%csoil(npt,slow)  = (casaflux%fromLtoS(npt,slow,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb) &
>                                  + casaflux%fromLtoS(npt,slow,str)*casaflux%klitter(npt,str)*casapool%clitter(npt,str) &
>                                  + casaflux%fromLtoS(npt,slow,cwd)*casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) &
>                                  + casaflux%fromStoS(npt,slow,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)  ) &
>                                 /casaflux%ksoil(npt,slow)
>       casapool%csoil(npt,pass)  = (casaflux%fromStoS(npt,pass,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)    &
>                                   +casaflux%fromStoS(npt,pass,slow)*casaflux%ksoil(npt,slow)*casapool%csoil(npt,slow) ) &
>                                 /casaflux%ksoil(npt,pass)
>       if(icycle <=1) then 
>          casapool%nlitter(npt,:)= casapool%rationclitter(npt,:) * casapool%clitter(npt,:)
>          casapool%nsoil(npt,:)  = casapool%ratioNCsoil(npt,:)   * casapool%Csoil(npt,:)
>          casapool%nsoilmin(npt) = 2.0
>          casabal%sumnbal(npt)   = 0.0 
>        ELSE
>        ! compute steady-state litter and soil N pool sizes
>          casapool%nlitter(npt,metb) = (avgnleaf2met(npt)+avgnroot2met(npt))/casaflux%klitter(npt,metb)
>          casapool%nlitter(npt,str) = (avgnleaf2str(npt)+avgnroot2str(npt))/casaflux%klitter(npt,str)
>          casapool%nlitter(npt,cwd) = (avgnwood2cwd(npt))/casaflux%klitter(npt,cwd)
> 
>          casapool%nsoil(npt,mic)   = (casaflux%fromLtoS(npt,mic,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb)   &
>                                      +casaflux%fromLtoS(npt,mic,str) *casaflux%klitter(npt,str)*casapool%clitter(npt,str)  &
>                                      +casaflux%fromLtoS(npt,mic,cwd) *casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) ) &
>                                    * casapool%ratioNCsoil(npt,mic)/casaflux%ksoil(npt,mic) 
>          casapool%nsoil(npt,slow)  = (casaflux%fromLtoS(npt,slow,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb) &
>                                      + casaflux%fromLtoS(npt,slow,str)*casaflux%klitter(npt,str)*casapool%clitter(npt,str) &
>                                      + casaflux%fromLtoS(npt,slow,cwd)*casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) &
>                                      + casaflux%fromStoS(npt,slow,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)  ) &
>                                    * casapool%ratioNCsoil(npt,slow)/casaflux%ksoil(npt,slow)
>          casapool%nsoil(npt,pass)  = (casaflux%fromStoS(npt,pass,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)    &
>                                      +casaflux%fromStoS(npt,pass,slow)*casaflux%ksoil(npt,slow)*casapool%csoil(npt,slow) ) &
>                                    * casapool%ratioNCsoil(npt,pass)/casaflux%ksoil(npt,pass)
>           casapool%Nsoilmin(npt)    = avgnsoilmin(npt)
> 
>         ENDIF
> 
>         IF (icycle<=2) THEN
>             totpsoil(npt)          = psorder(casamet%isorder(npt)) *xpsoil50(casamet%isorder(npt))
>             casapool%plitter(npt,:)= casapool%ratiopclitter(npt,:)  * casapool%clitter(npt,:)
>             casapool%psoil(npt,:)  = casapool%ratioPCsoil(npt,:)    * casapool%Csoil(npt,:)
>             casapool%psoillab(npt) = totpsoil(npt) *fracpLab(casamet%isorder(npt))
>             casapool%psoilsorb(npt)= casaflux%psorbmax(npt) * casapool%psoillab(npt) &
>                                     /(casaflux%kmlabp(npt)+casapool%psoillab(npt))
>             casapool%psoilocc(npt) = totpsoil(npt) *fracPocc(casamet%isorder(npt))
>         ELSE 
>         ! compute the steady-state litter and soil P pools
>           casapool%plitter(npt,metb) = (avgpleaf2met(npt)+avgproot2met(npt))/casaflux%klitter(npt,metb)
>           casapool%plitter(npt,str) = (avgpleaf2str(npt)+avgproot2str(npt))/casaflux%klitter(npt,str)
>           casapool%plitter(npt,cwd) = (avgpwood2cwd(npt))/casaflux%klitter(npt,cwd)
> 
>           casapool%psoil(npt,mic)   = (casaflux%fromLtoS(npt,mic,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb)   &
>                                      +casaflux%fromLtoS(npt,mic,str) *casaflux%klitter(npt,str)*casapool%clitter(npt,str)  &
>                                      +casaflux%fromLtoS(npt,mic,cwd) *casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) ) &
>                                    * casapool%ratioPCsoil(npt,mic)/casaflux%ksoil(npt,mic) 
>           casapool%psoil(npt,slow)  = (casaflux%fromLtoS(npt,slow,metb)*casaflux%klitter(npt,metb)*casapool%clitter(npt,metb) &
>                                      + casaflux%fromLtoS(npt,slow,str)*casaflux%klitter(npt,str)*casapool%clitter(npt,str) &
>                                      + casaflux%fromLtoS(npt,slow,cwd)*casaflux%klitter(npt,cwd)*casapool%clitter(npt,cwd) &
>                                      + casaflux%fromStoS(npt,slow,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)  ) &
>                                    * casapool%ratioPCsoil(npt,slow)/casaflux%ksoil(npt,slow)
>           casapool%psoil(npt,pass)  = (casaflux%fromStoS(npt,pass,mic) *casaflux%ksoil(npt,mic) *casapool%csoil(npt,mic)    &
>                                      +casaflux%fromStoS(npt,pass,slow)*casaflux%ksoil(npt,slow)*casapool%csoil(npt,slow) ) &
>                                    * casapool%ratioPCsoil(npt,pass)/casaflux%ksoil(npt,pass)
>           ! assign the mineral pools
>           casapool%psoillab(npt)      = avgpsoillab(npt)
>           casapool%psoilsorb(npt)     = avgPsoilsorb(npt)
>           casapool%psoilocc(npt)      = avgPsoilocc(npt)
>         ENDIF
>   ENDIF
>   ENDDO
> 
> !  write(517,*),'before analyticpool:casaflux%klitter(39:40,1:3),casa%ksoil(39:40,1:3),avgxkNlimiting(39:40),avgxklitter(39:40),casabiome%fracLigninplant(veg%iveg(39:40),1:3),casapool%clitter(39:40,1:3),casa%csoil%(39:40,1:3)',casaflux%klitter(39:40,1:3),casaflux%ksoil(39:40,1:3),avgxkNlimiting(39:40),avgxklitter(39:40),casabiome%fracLigninplant(veg%iveg(39:40),1:3),casapool%clitter(39:40,1:3),casapool%csoil(39:40,:)
>   END SUBROUTINE analyticpool  
