################################################################################
################################################################################
## This configuration file can be used to extract a copy of JULES, either
## from the current directory or from the Subversion repository, to a remote
## machine and build it there
################################################################################
################################################################################

################################################################################
# Read the environment variables determining the build environment
# Sensible defaults are given
################################################################################
# Settings for the remote machine
$JULES_CFG_SSH{?} = $HERE/ssh/remote-user.cfg

# Settings for the architecture
$JULES_CFG_MACH{?} = x86_64
$JULES_CFG_COMP{?} = gfortran
$JULES_CFG_BLD{?}  = normal

$JULES_CFG_ARCH{?} = $HERE/arch/$JULES_CFG_MACH/$JULES_CFG_COMP/$JULES_CFG_BLD.cfg

# NetCDF settings
$JULES_CFG_NCDF{?} = $HERE/ncdf/netcdf-dummy.cfg

# MPI settings
$JULES_CFG_MPI{?}  = $HERE/mpi/mpi-dummy.cfg

################################################################################
# Define the steps that will be run on what machine
################################################################################
steps = extract mirror

include = $JULES_CFG_SSH
mirror.target = ${USER}@${HOSTNAME}:${REMOTE_PATH}
mirror.prop{config-file.steps} = preprocess build

################################################################################
# Configure the extract step
################################################################################
extract.ns = jules
# The location is the root JULES directory
extract.location[jules] = $HERE/../..
# We want to ignore UM specific things (and routing for now)
extract.path-excl[jules] = / src/control/um src/initialisation/um     \
                           src/params/um src/science/soil/routing.F90 \
                           src/science/snow/snow_intctl.F90           \
                           src/science/surface/flake_interface.F90

# The directories we want included in the extract are includes, src and any
# dummy utilities that we have to build - we always use the drhook_dummy
# Architecture, ncdf and mpi config files can append to this
$extract_path_incl = includes src utils/drhook_dummy

################################################################################
# Configure the preprocess step
################################################################################
preprocess.target{ns} = jules
preprocess.target{category} = include src
preprocess.target{task} = install process
preprocess.prop{file-ext.h} = .h .inc

################################################################################
# Configure the build step
################################################################################
# Build options that are the same for every configuration
build.target = jules.exe
# By default, we ignore any references to the netcdf module, assuming that
# it will be coming from an external source. This assumption is overridden in
# ./ncdf/netcdf-dummy.cfg if compiling without NetCDF (see the file for
# more detail).
build.prop{no-dep.f.module} = netcdf
# Similarly, ignore any dependencies on mpif.h unless ./mpi/mpi-dummy.cfg is
# included
build.prop{no-dep.include} = mpif.h
# Explicit dependencies that need to be defined
build.prop{ns-dep.o}[jules/src/control/standalone/jules.F90] = jules/src/initialisation/standalone \
                                                               jules/src/science                   \
                                                               jules/src/control/imogen            \
                                                               jules/utils
build.prop{dep.o}[jules/src/control/standalone/jules.F90] = control.o next_time.o

# Variables for build options that will be appended to by the arch, ncdf and mpi
# configs
$fpp_defs = SCMA BL_DIAG_HACK
$fflags = 
$ldflags = 

################################################################################
# Import/derive build options that depend on architecture or NetCDF configs
################################################################################
include = $JULES_CFG_NCDF
include = $JULES_CFG_ARCH
include = $JULES_CFG_MPI

# Copy the variables we have passed around into build properties
extract.path-incl[jules]  = $extract_path_incl
preprocess.prop{fpp.defs} = $fpp_defs
build.prop{fc.flags}      = $fflags
build.prop{fc.flags-ld}   = $ldflags
build.prop{fc.defs}       = $fpp_defs
