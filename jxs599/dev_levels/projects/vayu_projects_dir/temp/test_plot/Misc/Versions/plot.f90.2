!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!  this program is used to read data from a file.         !!!!!!
!!!!!!  this program is made to be as generic as possible,     !!!!!!
!!!!!!  but requires some input information such as file       !!!!!!
!!!!!!  name and size.                                         !!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   PROGRAM plot
      !use genericread_module
      implicit none
!      interface readGamma
!         module procedure readGammaX,readGamma_Srb
!      end interface 
         integer :: N,i
         !real*8, dimension (:), allocatable :: x, Gamma_BH,Gamma_Srb,Gamma_F
         real*8, pointer :: x(:), Gamma_BH(:),Gamma_Srb(:),Gamma_F(:)
         real*8 :: cfactor=2.82
            N=29
            call readGammaX("Input/lambda.dat",N,x)
!            call readGamma("Input/BHGamma.dat",N,Gamma_BH)
!            call readGamma("Input/J21_mfp.dat",N,Gamma_F)
!            call readGamma("Input/BHGamma.dat",N,Gamma_Srb,cfactor)
            do i=1,N
!            write (*,fmt=10),x(i),Gamma_BH(i),Gamma_Srb(i),Gamma_F(i)
            write (*,*),x(i)
         10 format(F9.3XXX,F9.3XXX,F9.3XXX,F9.3)             
            enddo

 
!            nullify (xdata); nullify (ydata)
!            deallocate(xplot); deallocate(yplot)
!            beenthere=.false.



      stop
      contains
         subroutine readGammaX(filename,N,whereto)
            use fundamental_parameters
            implicit none
               character (len=*) :: filename
               integer :: N,altest,i
               real*8, pointer :: whereto(:)
                  nullify(whereto)
                  allocate (whereto(N),stat=altest)
do i=1,N
whereto(i)=1
enddo
print *,"here"
!                  open(unit=1,file=filename,&
!               &  status="old",action="read",iostat=openstatus)
!                  if(openstatus==ok) then
!                     read (1,*) whereto
!                  else
!                    print *, filename,'NOT found'
!                    stop
!                  endif
!                  close(1)
            return 
         end subroutine
         subroutine readGamma_Srb(filename,N,whereto,cfactor)
            use fundamental_parameters
            implicit none
               character (len=*) :: filename
               integer :: N,altest
               real*8, pointer :: whereto(:)
               real*8 :: cfactor
                 allocate (whereto(N),stat=altest)
                  open(unit=1,file=filename,&
               &  status="old",action="read",iostat=openstatus)
                  if(openstatus==ok) then
                     read (1,*) whereto
                  else
                    print *, filename,'NOT found'
                    stop
                  endif
                  close(1)
            return 
         end subroutine

 
   end program plot





      subroutine Plotxy(N,x,y)
      implicit none
        integer :: N
        real, dimension (N):: x, y
        logical, pointer :: breadcrumbs
!            breadcrumbs=>beenthere
!            if(.not.beenthere) then
!              beenthere=.true.
!              call plot_setup(N,x,y)
!            endif
!            call plot_caller(N,x,y)
!            call pgend
        return
      end subroutine
      subroutine plot_setup(N,x,y)
      implicit none
        integer :: N,i
        real, dimension (N):: x, y
        real ::  ixmin=10000,ixmax=0,iymin=10000,iymax=0
!            do i=1,N
!              if (x(i)<ixmin) then
!                ixmin=x(i) 
!              endif     
!              if (x(i)>ixmax) then
!                ixmax=x(i) 
!              endif     
!              if (y(i)<iymin) then
!                iymin=y(i) 
!              endif     
!              if (y(i)>iymax) then
!                iymax=y(i) 
!              endif     
!              xmin=ixmin; xmax=ixmax
!              ymin=iymin; ymax=iymax
!            enddo
!            call pgbeg(0,"/xs",1,1)  
!            call pgpage()
!            call pgsvp(.1,.9,.1,.9);
!            call pgsch(1.5)
!            call pgmtxt('B',2.0,0.5,0.5,'test')
!            call pgswin(xmin,xmax,ymin,ymax)  
!            call pgbox('BNCST', 0.0, 0, 'BSTNC', 0.0,0)  
!            call pgmtxt('T',2,0.5,0.5,&
!     &      "Transmission measurements: 19 quasars")
!            call pgmtxt('B',2,0.5,0.5,"z\\dobs\\u")
!            call pgmtxt('L',4,0.5,0.5,"Transmission")
!            call pgslw(1); call pgsci(2)
      return
      end SUBROUTINE plot_setup
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE plot_caller(N,x,y)
      implicit none
        integer :: N
        real, dimension (N):: x, y
!            call pgline(N,x,y)
      return
      end SUBROUTINE plot_caller
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!








!
