#################################################################################
##### This zero_diff directory contains tools necessary to quickly check    #####
##### whether ANY changes you have made in the code have inadvertently      #####
##### *changed* the CABLE model.                                            #####
#################################################################################

# NAME
#     zero_diff.ksh -- check that the CABLE model is bitwise identical between 
#                      two revisions where this is indeed inteneded
#
# SYNOPSIS
#     zero_diff.ksh [-n]

# DESCRIPTION
#     Executing the script zero_diff.ksh following an approriately          
#     configured run, will compare binary output produed by the run TO      
#     binary data from a standard run. Should the ttwo versions be bitwise 
#     identical, the printed result of zero_diff.ksh will be ZERO. Else it 
#     will be greater than zero.
#
#     CABLE reads a namelist file (cable.nml) at runtime to configure 
#     the model. Setting the variable cable_user%RUN_DIAG_LEVEL to "zero" will 
#     result in a CALL to subroutine cable_diag() being executed. This  
#     subroutine is passed (amongst other things) the data to be written to file
#     and the node #(N-1) from which it is written (starting from 00). A serial
#     (single node) run this is only 00. The binary data is written to a file(s) 
#     called FLUXES00.bin [to FLUXES(N-1).bin]. An additional file is output
#     FLUXES.dat, which contains informattion regarding FLUXES.bin necessary
#     to interpret the file in post-processing.
#


#####    This should be set to 'zero'. The model does not need to be        #####
#####    re-built. Then simply run your online or offline application.      #####

#     configured run, will compare binary output produed by the run TO      
#     NO difference between the standard version of the model and your test 
#     version. d run, will compare binary output produed by the run TO      

##### configured run, will compare binary output produed by the run TO      #####
#################################################################################

#################################################################################
##### 1. The first thing to do is edit your namelist  file (cable.nml).     #####
#####    There is a variable in the CABLE model (declared in cable_common)  #####
#####    called cable_user%RUN_DIAG_LEVEL. this can be set in cable.nml.    #####
#####    This should be set to 'zero'. The model does not need to be        #####
#####    re-built. Then simply run your online or offline application.      #####
#####                                                                       #####
#####    Setting this switch to 'zero' will activate IF loops at the        #####
#####    top-level in CABLE. Offline this is in cable_driver, online this   #####
#####    is in cable_explicit_driver. Effectively a CALL to cable_diag()    #####
#####    subroutine will be executed. In this instance, the CALL to         #####
#####    cable_diag() writes a binary file containing the sum of Latent     #####
#####    heat flux and sensible heat flux to the boundary layer, at EVERY   #####
#####    time step. We will revisit this further below.
#################################################################################
ZZ
#################################################################################
##### 2. Following your RUN, this will leave output file(s) in your         #####
#####    execution directory. you should checkout svn @XXXX/zero_diff/      #####
#####    In this directory is a blah directory etc.                         #####
The script zero_diff.ksh basically writes a small text file for consumption by a Fortran program diffmain.F90. If no arguments are given to 
#####    This should be set to 'zero'. The model does not need to be        #####
#####    re-built. Then simply run your online or offline application.      #####
#################################################################################




cp OR link to base output FLUXES from CABLE (std.bin) and also comparable FLUXES (FLUXES00.bin)

submit script zero_diff.ksh

