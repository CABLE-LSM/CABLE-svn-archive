Index: offline/build/Make_CABLE-offline
===================================================================
--- offline/build/Make_CABLE-offline	(revision 422)
+++ offline/build/Make_CABLE-offline	(working copy)
@@ -10,19 +10,19 @@
 ##########################################################################
 
 ## vayu.nci.org.au
-FC = ifort
-NCDIR = /apps/netcdf/3.6.3/lib/Intel
-NCMOD = /apps/netcdf/3.6.3/include/Intel/
+#FC = ifort
+#NCDIR = /apps/netcdf/3.6.3/lib/Intel
+#NCMOD = /apps/netcdf/3.6.3/include/Intel/
 #ifort compiler options
-FFLAGS = -O2 -fp-model precise -ftz -fpe0
+#FFLAGS = -O2 -fp-model precise -ftz -fpe0
 #FFLAGS = -O0 -traceback -g -fp-model precise -ftz -fpe0 -I$(NCMOD) 
 
 ## shine-cl
-#FC = ifort
-#NCDIR = /usr/local/intel/lib/            # netcdf library address on shine-cl
-#NCMOD = /usr/local/intel/include/                    # on shine-cl
+FC = ifort
+NCDIR = /usr/local/intel/lib/            # netcdf library address on shine-cl
+NCMOD = /usr/local/intel/include/                    # on shine-cl
 ## ifort compiler options
-#FFLAGS = -O2 -fp-model precise -ftz -fpe0
+FFLAGS = -O2 -fp-model precise -ftz -fpe0
 #FFLAGS = -O0 -traceback -g -fp-model precise -ftz -fpe0 -I$(NCMOD) 
 
 #zjlnik: jxs599 Mac
Index: offline/test_offline/cable.nml
===================================================================
--- offline/test_offline/cable.nml	(revision 422)
+++ offline/test_offline/cable.nml	(working copy)
@@ -1,5 +1,5 @@
 &cable
-  filename%met = 'data/sample_met/Tumbarumba_csiro.nc'
+  filename%met = 'data/sample_met/Bondville1997_csiro.nc'
   filename%out = 'out_cable.nc'
   filename%log = 'log_cable.txt'
   filename%restart_in  = ' '
@@ -37,7 +37,7 @@
   icycle = 1   ! BP pull it out from casadimension and put here; 0 for not using casaCNP, 1 for C, 2 for C+N, 3 for C+N+P
 casafile%cnpbiome='../../core/pkg/CASA/data/pftlookup_csiro_v16_17tiles.csv'  ! biome specific BGC parameters
 casafile%cnpepool='poolcnpOut.csv'    ! end of run pool size
-casafile%cnpipool='data/surface_data/poolcnpInTumbarumba.csv'    ! initial pool size
+casafile%cnpipool='data/surface_data/poolcnpInBondville97.csv'    ! initial pool size
 casafile%cnpmetout='casamet.nc'                ! output daily met forcing for spinning casacnp
 casafile%cnpmetin='data/surface_data/fcasamet.lst'          ! list of daily met files for spinning casacnp
   casafile%phen='../../core/pkg/CASA/data/modis_phenology_csiro.txt'        ! modis phenology
@@ -63,4 +63,7 @@
   cable_user%RUN_DIAG_LEVEL= 'BASIC'        ! choices are: 
                                                 ! 1. BASIC
                                                 ! 1. NONE
+  !cable_user%CONSISTENCY_CHECK= .TRUE.      ! TRUE outputs combined fluxes at each timestep for comparisson to A control run 
+  !cable_user%CASA_DUMP_READ = .FALSE.      ! TRUE reads CASA forcing from netcdf format
+  !cable_user%CASA_DUMP_WRITE = .FALSE.      ! TRUE outputs CASA forcing in netcdf format
 &end
Index: offline/src/cable_driver.F90
===================================================================
--- offline/src/cable_driver.F90	(revision 422)
+++ offline/src/cable_driver.F90	(working copy)
@@ -1,275 +1,460 @@
-! cable_driver.f90
+
+!===COPYRIGHT==================================================================
+! The source codes are part of the australian 
+! Community Atmosphere Biosphere Land Exchange (CABLE) model. 
+! Please register online at xxx and sign the agreement before use 
+! contact: whox@xxxx.yyy about registration user agreement
+!==============================================================================
+
+
+!==============================================================================
+! Name: cable_driver
+! Purpose: offline driver for CABLE model
+! CALLed from: executed PROGRAM 
+! MODULEs used:   define_dimensions
+!                 define_types
+!                 io_variables
+!                 cable_common_module
+!                 input_module
+!                 output_module
+!                 cbm_module
+!                 casadimension
+!                 casavariable
+! 
+! CALLs:       open_met_file
+!              load_parameters
+!              open_output_file
+!              spincasacnp
+!              get_met_data
+!              casa_feedback
+!              cbm
+!              bgcdriver
+!              sumcflux
+!              write_output
+!              casa_poolout
+!              casa_fluxout
+!              create_restart
+!              close_met_file
+!              close_output_file
+!              prepareFiles
 !
-! Netcdf offline driver for CABLE land surface scheme, May 2009.
-! Gab Abramowitz, University of New South Wales, gabsun@gmail.com
+! Major contribution: land surface modeling team, CSIRO, Aspendale
 !
-! Thanks to Peter Isaac (Monash) for introducing the namelist file (Oct 2007)
+! input  file: ￼[SiteName].nc
+!              ￼poolcnpIn[SiteName].csv -- for CASA-CNP only
+!              ￼gridinfo_CSIRO_1x1.nc
+!              ￼def_veg_params.txt
+!              ￼def_soil_params.txt -- nearly redundant, can be switched on
+!              ￼restart_in.nc -- not strictly required
 !
-! Modified and added casaCNP, Bernard Pak, Sep 2010.
+! output file: ￼log_cable.txt
+!              ￼out_cable.nc
+!              ￼restart_out.nc
+!              ￼poolcnpOut.csv -- from CASA-CNP
+
+!==============================================================================
+
+
+!==============================================================================
+! changes since version release on 
+! changes made by who on date
 !
-! Please send bug reports to Bernard.Pak@csiro.au
-!
+!==============================================================================
+
+
 PROGRAM offline_driver
-  USE cbm_module
-  USE define_dimensions, ONLY:r_1,i_d,ms,mp,mvtype,mstype
-  USE define_types
-  USE io_variables, ONLY: logn,filename,gswpfile,ncciy,leaps, &
-            verbose, fixedCO2,output,check,patchout,patch_type,soilparmnew, &
-            redistrb, wiltParam, satuParam
-  USE input_module, ONLY: open_met_file,load_parameters, &
-            get_met_data,close_met_file
-  USE output_module, ONLY: create_restart,open_output_file, &
-            write_output,close_output_file
-  ! new modules related to casaCNP
-  USE casa_cnp   ! icycle declared in casadimension which is used in casa_cnp
-                 ! casafile declared in casavariable, also used in casa_cnp
-  USE cable_common_module, only : ktau_gl, kend_gl, knode_gl, cable_user, &
-            cable_runtime
+   USE define_dimensions,   ONLY: ms,mp,mvtype,mstype
+   USE define_types
+   USE io_variables,        ONLY: logn,filename,gswpfile,ncciy,leaps,          &
+                                  verbose, fixedCO2,output,check,patchout,     &
+                                  patch_type,soilparmnew,                      &
+                                  redistrb, wiltParam, satuParam
+   USE cable_common_module, ONLY: ktau_gl, kend_gl, knode_gl, cable_user,      &
+                                  cable_runtime
+   USE input_module,        ONLY: open_met_file,load_parameters,               &
+                                  get_met_data,close_met_file
+   USE output_module,       ONLY: create_restart,open_output_file,             &
+                                  write_output,close_output_file
+   USE cbm_module
+   
+   ! modules related to CASA-CNP
+   USE casadimension,       ONLY: icycle 
+   USE casavariable,        ONLY: casafile, casa_biome, casa_pool, casa_flux,  &
+                                  casa_met, casa_balance
+   USE phenvariable,        ONLY: phen_variable
+   USE cable_diag_module,   ONLY: cable_stat, cable_diag 
 
-  IMPLICIT NONE
-  INTEGER(i_d)          :: kend ! no. of time steps in run
-  TYPE (air_type)       :: air  ! air property variables
-  TYPE (bgc_pool_type)  :: bgc  ! carbon pool variables
-  TYPE (canopy_type)    :: canopy ! vegetation variables
-  TYPE (met_type)       :: met  ! met input variables
-  TYPE (balances_type)  :: bal  ! energy and water balance variables
-  TYPE (radiation_type) :: rad  ! radiation variables
-  TYPE (roughness_type) :: rough ! roughness varibles
-  TYPE (soil_parameter_type) :: soil ! soil parameters	
-  TYPE (soil_snow_type) :: ssoil ! soil and snow variables
-  TYPE (sum_flux_type)  :: sum_flux ! cumulative flux variables
-  TYPE (veg_parameter_type) :: veg  ! vegetation parameters	 
-  TYPE (casa_biome)     :: casabiome
-  TYPE (casa_pool)      :: casapool
-  TYPE (casa_flux)      :: casaflux
-  TYPE (casa_met)       :: casamet
-  TYPE (casa_balance)   :: casabal
-  TYPE (phen_variable)  :: phen 
-  REAL(r_1)         :: dels ! time step size in seconds
-  INTEGER(i_d)      :: kstart ! start of simulation #
-  LOGICAL    :: vegparmnew   ! using new format input file (BP dec 2007)
-  LOGICAL    :: spinup ! should the model spinup to soil state equilibrium?
-  LOGICAL    :: spinConv ! has spinup converged?
-  LOGICAL    :: spincasainput
-                   ! TRUE: input required to spin casacnp wil be saved;
-                   ! FALSE: input will be read in to spin casacnp 1000 years
-  LOGICAL    :: spincasa ! TRUE: casacnp will spin mloop times,
-                         ! FALSE: no spin up
-  LOGICAL    :: l_casacnp     ! using casaCNP with CABLE
-  LOGICAL    :: l_laiFeedbk   ! using prognostic LAI
-  LOGICAL    :: l_vcmaxFeedbk ! using prognostic Vcmax
-  REAL(r_1)  :: delsoilM ! allowed variation in soil moisture for spin up
-  REAL(r_1)  :: delsoilT ! allowed variation in soil temperature for spin up
-  REAL(r_1),POINTER  :: soilMtemp(:,:) ! temporary storage for spin up
-  REAL(r_1),POINTER  :: soilTtemp(:,:) ! temporary storage for spin up
-  INTEGER(i_d) :: tstep  ! time step counter for spinup
-  INTEGER(i_d) :: mloop  ! # spinup loops for casaCNP
-  INTEGER(i_d) :: ktauday  !  day counter for casaCNP
-  INTEGER(i_d) :: nyear    ! year counter for casaCNP
-   INTEGER(i_d) :: ktau !loop increment (corresponds to timestep)
-  NAMELIST/CABLE/filename, &
-                 vegparmnew,&
-                 soilparmnew,&
-                 spinup,delsoilM,delsoilT,&
-                 output,&
-                 patchout,&
-                 check,&
-                 verbose,leaps,logn,fixedCO2, &
-                 spincasainput,     &
-                 spincasa,          &
-                 l_casacnp, l_laiFeedbk, l_vcmaxFeedbk, &
-                 icycle,            &
-                 casafile,          &
-                 ncciy,             &
-                 gswpfile,          &
-                 redistrb, wiltParam, satuParam, &
-                 cable_user
-  !===================================================================!
+   IMPLICIT NONE
+   
+   ! CABLE namelist: model configuration, runtime/user switches 
+   CHARACTER(LEN=*), PARAMETER :: CABLE_NAMELIST = 'cable.nml'
+   
+   ! timing variables 
+   INTEGER, PARAMETER ::  kstart = 1   ! start of simulation
+   
+   INTEGER        ::                                                           &
+      ktau,       &  ! increment equates to timestep, resets if spinning up
+      ktau_tot,   &  ! NO reset when spinning up, total timesteps by model
+      kend,       &  ! no. of time steps in run
+      ktauday,    &  ! day counter for CASA-CNP
+      idoy,       &  ! day of year (1:365) counter for CASA-CNP
+      nyear          ! year counter for CASA-CNP
 
-  ! Open, read and close the namelist file.
-  OPEN(10,FILE='cable.nml')
-  READ(10,NML=CABLE)
-  CLOSE(10)
+   REAL :: dels                        ! time step size in seconds
+   
+   ! CABLE variables
+   TYPE (met_type)       :: met     ! met input variables
+   TYPE (air_type)       :: air     ! air property variables
+   TYPE (canopy_type)    :: canopy  ! vegetation variables
+   TYPE (radiation_type) :: rad     ! radiation variables
+   TYPE (roughness_type) :: rough   ! roughness varibles
+   TYPE (balances_type)  :: bal     ! energy and water balance variables
+   TYPE (soil_snow_type) :: ssoil   ! soil and snow variables
+   
+   ! CABLE parameters
+   TYPE (soil_parameter_type) :: soil ! soil parameters	
+   TYPE (veg_parameter_type)  :: veg  ! vegetation parameters	 
+   
+   TYPE (sum_flux_type)  :: sum_flux ! cumulative flux variables
+   TYPE (bgc_pool_type)  :: bgc  ! carbon pool variables
+   
+   ! CASA-CNP variables 
+   TYPE (casa_biome)     :: casabiome
+   TYPE (casa_pool)      :: casapool
+   TYPE (casa_flux)      :: casaflux
+   TYPE (casa_met)       :: casamet
+   TYPE (casa_balance)   :: casabal
+   TYPE (phen_variable)  :: phen 
+   
+   ! declare vars for switches (default .FALSE.) etc declared thru namelist
+   ! jhan: YP* these need looking at b4 i move them to switch status 
+   LOGICAL, save           :: &
+      vegparmnew = .FALSE.,       & ! using new format input file (BP dec 2007)
+      spinup = .FALSE.,           & ! model spinup to soil state equilibrium?
+      spinConv = .FALSE.,         & ! has spinup converged?
+      spincasainput = .FALSE.,    & ! TRUE: SAVE input req'd to spin CASA-CNP;
+                                    ! FALSE: READ input to spin CASA-CNP 
+      spincasa = .FALSE.,         & ! TRUE: CASA-CNP Will spin mloop times,
+                                    ! FALSE: no spin up
+      l_casacnp = .FALSE.,        & ! using CASA-CNP with CABLE
+      l_laiFeedbk = .FALSE.,      & ! using prognostic LAI
+      l_vcmaxFeedbk = .FALSE.       ! using prognostic Vcmax
+   
+   
+   ! jhan: move them to switch status 
+   REAL              :: &  
+      delsoilM,         & ! allowed variation in soil moisture for spin up
+      delsoilT            ! allowed variation in soil temperature for spin up
+  
+   ! temporary storage for soil moisture/temp. in spin up mode
+   REAL, ALLOCATABLE, DIMENSION(:,:)  :: & 
+      soilMtemp,                         &   
+      soilTtemp      
+   
+   ! switches etc defined thru namelist (by default cable.nml)
+   ! jhan; comments needed for each, tidy, def type nml% ?
+   NAMELIST/CABLE/                  &
+                  filename,         & ! TYPE, containing input filenames 
+                  vegparmnew,       & ! jhan: use new soil param. method
+                  soilparmnew,      & ! jhan: use new soil param. method
+                  spinup,           & ! spinup model (soil) to steady state 
+                  delsoilM,delsoilT,& ! jhan: TOLS: def TYPE for all tols?
+                  output,           &
+                  patchout,         &
+                  check,            &
+                  verbose,          &
+                  leaps,            &
+                  logn,             &
+                  fixedCO2,         &
+                  spincasainput,    &
+                  spincasa,         &
+                  l_casacnp,        &
+                  l_laiFeedbk,      &
+                  l_vcmaxFeedbk,    &
+                  icycle,           &
+                  casafile,         &
+                  ncciy,            &
+                  gswpfile,         &
+                  redistrb,         &
+                  wiltParam,        &
+                  satuParam,        &
+                  cable_user           ! additional USER switches 
 
-  cable_runtime%offline = .TRUE.
-  !=====================================================================!
+   ! END header
 
-  IF (l_casacnp  .AND. (icycle == 0 .OR. icycle > 3)) &
-               STOP 'icycle must be 1 to 3 when using casaCNP'
-  IF ((l_laiFeedbk .OR. l_vcmaxFeedbk) .AND. (.NOT. l_casacnp)) &
-               STOP 'casaCNP required to get prognostic LAI or Vcmax'
-  IF (l_vcmaxFeedbk .AND. icycle < 2) &
-               STOP 'icycle must be 2 to 3 to get prognostic Vcmax'
-  IF (icycle > 0 .AND. (.NOT. soilparmnew)) &
-               STOP 'casaCNP must use new soil parameters'
 
-  ! Open log file:
-  OPEN(logn,FILE=filename%log)
 
-  ! Check for gswp run
-  IF (ncciy /= 0) THEN
-    PRINT *, 'Looking for global offline run info.'
-    IF (ncciy < 1986 .OR. ncciy > 1995) THEN
-      PRINT *, 'Year ', ncciy, ' outside range of dataset!'
-      PRINT *, 'Please check input in namelist file.'
-      STOP
-    ELSE
-      CALL prepareFiles(ncciy)
-    ENDIF
-  ENDIF
+   ! Open, read and close the namelist file.
+   OPEN( 10, FILE = CABLE_NAMELIST )
+      READ( 10, NML=CABLE )   !where NML=CABLE defined above
+   CLOSE(10)
 
-  ! Open met data and get site information from netcdf file.
-  ! This retrieves time step size, number of timesteps, starting date,
-  ! latitudes, longitudes, number of sites. 
-  CALL open_met_file(dels,kend,spinup)
+   cable_runtime%offline = .TRUE.
 
-  ! Checks where parameters and initialisations should be loaded from.
-  ! If they can be found in either the met file or restart file, they will 
-  ! load from there, with the met file taking precedence. Otherwise, they'll
-  ! be chosen from a coarse global grid of veg and soil types, based on 
-  ! the lat/lon coordinates. Allocation of CABLE's main variables also here.
-  CALL load_parameters(met,air,ssoil,veg,bgc,soil,canopy, &
-       rough,rad,sum_flux,bal,logn,vegparmnew, &
-       casabiome,casapool,casaflux,casamet,casabal,phen)
+   ! if cable_user%CASA_dump_read is false then  the code expects just to run 
+   ! CABLE. If you want to write CASA_dump.nc in this case then you have 
+   ! to re-set %CASA_dump_write=.true. via namelist 
+   ! if %CASA_dump_read = .TRUE. then the code expects to run CASA from 
+   ! forcing & you cant write CASA_dump.nc in this case 
+   !IF ( .NOT. cable_user%CASA_dump_read ) THEN 
+   
+      IF( l_casacnp  .AND. ( icycle == 0 .OR. icycle > 3 ) )                   &
+         STOP 'icycle must be 1 to 3 when using casaCNP'
+      IF( ( l_laiFeedbk .OR. l_vcmaxFeedbk ) .AND. ( .NOT. l_casacnp ) )       &
+         STOP 'casaCNP required to get prognostic LAI or Vcmax'
+      IF( l_vcmaxFeedbk .AND. icycle < 2 )                                     &
+         STOP 'icycle must be 2 to 3 to get prognostic Vcmax'
+      IF( icycle > 0 .AND. ( .NOT. soilparmnew ) )                             &
+         STOP 'casaCNP must use new soil parameters'
+   
+      ! Open log file:
+      OPEN(logn,FILE=filename%log)
+    
+      ! Check for gswp run
+      IF (ncciy /= 0) THEN
+         
+         PRINT *, 'Looking for global offline run info.'
+         
+         IF (ncciy < 1986 .OR. ncciy > 1995) THEN
+            PRINT *, 'Year ', ncciy, ' outside range of dataset!'
+            STOP 'Please check input in namelist file.'
+         ELSE
+            
+            CALL prepareFiles(ncciy)
+         
+         ENDIF
+      
+      ENDIF
+   
+   !ENDIF
 
-  ! Open output file:
-  CALL open_output_file(dels,soil,veg,bgc,rough)
+   ! Open met data and get site information from netcdf file.
+   ! This retrieves time step size, number of timesteps, starting date,
+   ! latitudes, longitudes, number of sites. 
+   CALL open_met_file( dels, kend, spinup )
+ 
+   ! Checks where parameters and initialisations should be loaded from.
+   ! If they can be found in either the met file or restart file, they will 
+   ! load from there, with the met file taking precedence. Otherwise, they'll
+   ! be chosen from a coarse global grid of veg and soil types, based on 
+   ! the lat/lon coordinates. Allocation of CABLE's main variables also here.
+   CALL load_parameters( met, air, ssoil, veg, bgc,                            &
+                         soil, canopy, rough, rad, sum_flux,                   &
+                         bal, logn, vegparmnew, casabiome, casapool,           &
+                         casaflux, casamet, casabal, phen )
 
-  kstart = 1
+   !IF ( .NOT. cable_user%CASA_dump_read ) THEN 
+   
+     ! Open output file:
+     CALL open_output_file( dels, soil, veg, bgc, rough )
+   
+     ssoil%otss_0 = ssoil%tgg(:,1)
+     ssoil%otss = ssoil%tgg(:,1)
+     canopy%fes_cor = 0.
+     canopy%fhs_cor = 0.
+     met%ofsd = 0.1
+   
+   !ENDIF
+  
+   ! outer loop = spinup loop:
+   DO
 
-  tstep = 0          ! initialise spinup time step
-  ssoil%otss_0 = ssoil%tgg(:,1)
-  ssoil%otss = ssoil%tgg(:,1)
-  canopy%fes_cor = 0.
-  canopy%fhs_cor = 0.
-  spinConv = .FALSE. ! initialise spinup convergence variable
-  met%ofsd = 0.1
-  ! spinup loop:
+      ! globally (WRT code) accessible kend through USE cable_common_module
+      kend_gl = kend
+      knode_gl = 0
+      
+      ! time step loop over ktau
+      DO ktau=kstart, kend 
+         
+         ! increment total timstep counter
+         ktau_tot = ktau_tot + 1
+         
+         ! globally (WRT code) accessible kend through USE cable_common_module
+         ktau_gl = ktau
+         
+         ! somethings (e.g. CASA-CNP) only need to be done once per day  
+         ktauday=int(24.0*3600.0/dels)
+         idoy = mod(ktau/ktauday,365)
+         IF(idoy==0) idoy=365
+         
+         ! needed for CASA-CNP
+         nyear =INT((kend-kstart+1)/(365*ktauday))
+   
+         !IF ( .NOT. cable_user%CASA_dump_read ) THEN 
+  
+            canopy%oldcansto=canopy%cansto
+   
+            ! Get met data and LAI, set time variables.
+            ! Rainfall input may be augmented for spinup purposes:
+             met%ofsd = met%fsd(:,1) + met%fsd(:,2)
+            CALL get_met_data( spinup, spinConv, met, soil,                    &
+                               rad, veg, kend, dels ) 
+         !ENDIF
+   
+         !IF( cable_user%CASA_dump_read ) then 
+            
+            !IF( mod( (ktau-kstart+1), ktauday ) == 0 ) THEN
+               !CALL read_casa_dump( casamet, casaflux, idoy, kend )
+            !ENDIF
+         
+         !ELSE 
+            
+            ! Feedback prognostic vcmax and daily LAI from casaCNP to CABLE
+            IF (l_vcmaxFeedbk) CALL casa_feedback( ktau_gl, veg, casabiome,    &
+                                                   casapool, casamet )
+   
+            IF (l_laiFeedbk) veg%vlai(:) = casamet%glai(:)
+   
+            ! CALL land surface scheme for this timestep, all grid points:
+            CALL cbm( dels, air, bgc, canopy, met,                             &
+                      bal, rad, rough, soil, ssoil,                            &
+                      sum_flux, veg )
+   
+            ssoil%smelt = ssoil%smelt*dels
+            ssoil%rnof1 = ssoil%rnof1*dels
+            ssoil%rnof2 = ssoil%rnof2*dels
+            ssoil%runoff = ssoil%runoff*dels
+   
+         !ENDIF
+   
+   
+         !jhan this is insufficient testing. condition for 
+         !spinup=.false. & we want CASA_dump.nc (spinConv=.true.)
+         IF(icycle >0) THEN
+            call bgcdriver( ktau_gl, kstart, kend, dels, met,                  &
+                            ssoil, canopy, veg, soil, casabiome,               &
+                            casapool, casaflux, casamet, casabal,              &
+                            phen, spinConv, spinup, ktauday, idoy,             &
+                            !cable_user%CASA_dump_read,                         &
+                            !cable_user%CASA_dump_write )
+                            .false.,                         &
+                            .false. )
+         ENDIF 
+   
+         ! sumcflux is pulled out of subroutine cbm
+         ! so that casaCNP can be called before adding the fluxes (Feb 2008, YP)
+         CALL sumcflux( ktau_gl, kstart, kend, dels, bgc,                      &
+                        canopy, soil, ssoil, sum_flux, veg,                    &
+                        met, casaflux, l_vcmaxFeedbk )
+   
+         !IF( .NOT. cable_user%CASA_dump_read ) then 
+            ! Write time step's output to file if either: we're not spinning up 
+            ! or we're spinning up and the spinup has converged:
+            IF((.NOT.spinup).OR.(spinup.AND.spinConv))                         &
+               CALL write_output( dels, met, canopy, ssoil,                    &
+                                  rad, bal, air, soil, veg )
+         !ENDIF
+   
+         !IF (cable_user%CONSISTENCY_CHECK) THEN
 
-DO
-   ktau_gl=0
-   kend_gl = kend
-   knode_gl = 0
-   ! time step loop:
+            IF((.NOT.spinup).OR.(spinup.AND.spinConv)) then 
+               ! temporarily first arg = unique UNIT no. for file 
+               ! ALSO temporarily, corresponding scripts on request only 
+               call cable_diag( 12121, 1, "Sumfluxes", mp, kend, ktau,         &
+                                knode_gl, "sumfluxes", canopy%fe + canopy%fh )       
+            ENDIF 
+         
+         !ENDIF 
+   
+       END DO ! END Do loop over timestep ktau
 
-   DO ktau=kstart, kend ! time step loop
-      ! increment total timstep counter
-      tstep = tstep + 1
-      ktau_gl= ktau_gl + 1
 
-      canopy%oldcansto=canopy%cansto
 
-      ! Get met data and LAI, set time variables.
-      ! Rainfall input may be augmented for spinup purposes:
-       met%ofsd = met%fsd(:,1) + met%fsd(:,2)
-      CALL get_met_data(spinup,spinConv,met,soil,rad,veg,kend,dels) 
+   
+      !jhan this is insufficient testing. condition for 
+      !spinup=.false. & we want CASA_dump.nc (spinConv=.true.)
+      ! see if spinup (if conducting one) has converged:
+      IF(spinup.AND..NOT.spinConv) THEN
+         
+         ! Write to screen and log file:
+         WRITE(*,'(A18,I3,A24)') ' Spinning up: run ',INT(ktau_tot/kend),      &
+               ' of data set complete...'
+         WRITE(logn,'(A18,I3,A24)') ' Spinning up: run ',INT(ktau_tot/kend),   &
+               ' of data set complete...'
+         
+         ! IF not 1st run through whole dataset:
+         IF( INT( ktau_tot/kend ) > 1 ) THEN 
+            
+            ! evaluate spinup
+            IF( ANY( ABS(ssoil%wb-soilMtemp)>delsoilM).OR.                     &
+                ANY(ABS(ssoil%tgg-soilTtemp)>delsoilT) ) THEN
+               
+               ! No complete convergence yet
+               PRINT *, 'ssoil%wb : ', ssoil%wb
+               PRINT *, 'soilMtemp: ', soilMtemp
+               PRINT *, 'ssoil%tgg: ', ssoil%tgg
+               PRINT *, 'soilTtemp: ', soilTtemp
+            
+            ELSE ! spinup has converged
+               
+               spinConv = .TRUE.
+               ! Write to screen and log file:
+               WRITE(*,'(A33)') ' Spinup has converged - final run'
+               WRITE(logn,'(A52)')                                             &
+                          ' Spinup has converged - final run - writing all data'
+               WRITE(logn,'(A37,F7.5,A28)')                                    &
+                          ' Criteria: Change in soil moisture < ',             &
+                          delsoilM, ' in any layer over whole run'
+               WRITE(logn,'(A40,F7.5,A28)' )                                   &
+                          '           Change in soil temperature < ',          &
+                          delsoilT, ' in any layer over whole run'
+            END IF
 
-      ! Feedback prognostic vcmax and daily LAI from casaCNP to CABLE
-      IF (l_vcmaxFeedbk) CALL casa_feedback(ktau_gl,veg,casabiome,casapool,casamet)
-      IF (l_laiFeedbk)   veg%vlai(:) = casamet%glai(:)
+         ELSE ! allocate variables for storage
+         
+           ALLOCATE( soilMtemp(mp,ms), soilTtemp(mp,ms) )
+         
+         END IF
+         
+         ! store soil moisture and temperature
+         soilTtemp = ssoil%tgg
+         soilMtemp = REAL(ssoil%wb)
 
-      ! CALL land surface scheme for this timestep, all grid points:
-      CALL cbm(dels, air, bgc, canopy, met, &
-             & bal, rad, rough, soil, ssoil, sum_flux, veg)
+       ELSE
+
+         ! if not spinning up, or spin up has converged, exit:
+         EXIT
        
-      ssoil%smelt = ssoil%smelt*dels
-      ssoil%rnof1 = ssoil%rnof1*dels
-      ssoil%rnof2 = ssoil%rnof2*dels
-      ssoil%runoff = ssoil%runoff*dels
+       END IF
 
-      if(icycle >0) then
-        call bgcdriver(ktau_gl,kstart,kend,dels,met,ssoil,canopy,veg,soil, &
-                  casabiome,casapool,casaflux,casamet,casabal,phen)
-      endif 
+   END DO
 
-      ! sumcflux is pulled out of subroutine cbm
-      ! so that casaCNP can be called before adding the fluxes (Feb 2008, YP)
-      CALL sumcflux(ktau_gl, kstart, kend, dels, bgc, canopy,  &
-                  & soil, ssoil, sum_flux, veg, met, casaflux, &
-                  & l_vcmaxFeedbk)
+   IF (icycle > 0) THEN
+      
+      CALL casa_poolout( ktau, veg, soil, casabiome,                           &
+                         casapool, casaflux, casamet, casabal, phen )
 
-      ! Write time step's output to file if either: we're not spinning up 
-      ! or we're spinning up and the spinup has converged:
-      IF((.NOT.spinup).OR.(spinup.AND.spinConv)) CALL write_output &
-             & (dels,met,canopy,ssoil,rad,bal,air,soil,veg)
+      CALL casa_fluxout( nyear, veg, soil, casabal, casamet)
+  
+   END IF
 
-    END DO
-    ! see if spinup (if conducting one) has converged:
-    IF(spinup.AND..NOT.spinConv) THEN
-      ! Write to screen and log file:
-      WRITE(*,'(A18,I3,A24)') ' Spinning up: run ',INT(tstep/kend), &
-            ' of data set complete...'
-      WRITE(logn,'(A18,I3,A24)') ' Spinning up: run ',INT(tstep/kend), &
-            ' of data set complete...'
+   ! Write restart file if requested:
+   IF(output%restart)                                                          &
+      CALL create_restart( logn, dels, soil, veg, ssoil,                       &
+                           canopy, rough, rad, bgc, bal )
       
-      ! IF not 1st run through whole dataset:
-      IF(INT(tstep/kend)>1) THEN 
-        ! evaluate spinup
-        IF(ANY(ABS(ssoil%wb-soilMtemp)>delsoilM).OR. &
-           ANY(ABS(ssoil%tgg-soilTtemp)>delsoilT)) THEN
-          ! No complete convergence yet
-          PRINT *, 'ssoil%wb : ', ssoil%wb
-          PRINT *, 'soilMtemp: ', soilMtemp
-          PRINT *, 'ssoil%tgg: ', ssoil%tgg
-          PRINT *, 'soilTtemp: ', soilTtemp
-        ELSE ! spinup has converged
-          spinConv = .TRUE.
-          ! Write to screen and log file:
-          WRITE(*,'(A33)') ' Spinup has converged - final run'
-          WRITE(logn,'(A52)') &
-               ' Spinup has converged - final run - writing all data'
-          WRITE(logn,'(A37,F7.5,A28)') &
-               ' Criteria: Change in soil moisture < ', &
-               delsoilM, ' in any layer over whole run'
-          WRITE(logn,'(A40,F7.5,A28)' ) & 
-               '           Change in soil temperature < ', &
-               delsoilT, ' in any layer over whole run'
-        END IF
-      ELSE ! allocate variables for storage
-        ALLOCATE(soilMtemp(mp,ms), &
-               & soilTtemp(mp,ms))
-      END IF
-      ! store soil moisture and temperature
-      soilTtemp = ssoil%tgg
-      soilMtemp = REAL(ssoil%wb,r_1)
-    ELSE
-      ! if not spinning up, or spin up has converged, exit:
-      EXIT
-    END IF
-END DO
+   ! Close met data input file:
+   CALL close_met_file
+ 
+   !IF( .NOT. cable_user%CASA_dump_read ) then 
+   ! Close output file and deallocate main variables:
+   CALL close_output_file( bal, air, bgc, canopy, met,                         &
+                           rad, rough, soil, ssoil,                            &
+                           sum_flux, veg )
+   !ENDIF   
+   
+   WRITE(logn,*) bal%wbal_tot, bal%ebal_tot, bal%ebal_tot_cncheck
 
-  IF (icycle > 0) THEN
-    CALL casa_poolout(ktau_gl,veg,soil,casabiome,casapool,casaflux,casamet, &
-                        casabal,phen)
-    ktauday=int(24.0*3600.0/dels)
-    nyear =INT((kend-kstart+1)/(365*ktauday))
-    CALL casa_fluxout(nyear,veg,soil,casabal,casamet)
-  END IF
+   ! Close log file
+   CLOSE(logn)
 
-  ! Write restart file if requested:
-  IF(output%restart) CALL create_restart(logn,dels,&
-       soil,veg,ssoil,canopy,rough,rad,bgc,bal)
-    WRITE(logn,*) &
-             & bal%wbal_tot,bal%ebal_tot,bal%ebal_tot_cncheck
-
-  ! Close met data input file:
-  CALL close_met_file
-  ! Close output file and deallocate main variables:
-  CALL close_output_file(bal, air, &
-       bgc, canopy, met, rad, rough, soil, ssoil, sum_flux, veg)
-
-  ! Close log file
-  CLOSE(logn)
-
-   stop
 END PROGRAM offline_driver
 
 
 SUBROUTINE prepareFiles(ncciy)
-  USE define_dimensions, ONLY: i_d
   USE io_variables, ONLY: logn,gswpfile
   IMPLICIT NONE
-  INTEGER(i_d), INTENT(IN) :: ncciy
+  INTEGER, INTENT(IN) :: ncciy
 
   WRITE(logn,*) 'CABLE offline global run using gswp forcing for ', ncciy
   PRINT *,      'CABLE offline global run using gswp forcing for ', ncciy
@@ -287,14 +472,13 @@
 
 
 SUBROUTINE renameFiles(logn,inFile,nn,ncciy,inName)
-  USE define_dimensions, ONLY: i_d
   IMPLICIT NONE
-  INTEGER(i_d), INTENT(IN) :: logn
-  INTEGER(i_d), INTENT(IN) :: nn
-  INTEGER(i_d), INTENT(IN) :: ncciy
+  INTEGER, INTENT(IN) :: logn
+  INTEGER, INTENT(IN) :: nn
+  INTEGER, INTENT(IN) :: ncciy
   CHARACTER(LEN=99), INTENT(INOUT) :: inFile
   CHARACTER(LEN=*),  INTENT(IN)    :: inName
-  INTEGER(i_d) :: idummy
+  INTEGER :: idummy
 
   READ(inFile(nn:nn+3),'(i4)') idummy
   IF (idummy < 1983 .OR. idummy > 1995) THEN
Index: core/src/common/cable_diag.F90
===================================================================
--- core/src/common/cable_diag.F90	(revision 422)
+++ core/src/common/cable_diag.F90	(working copy)
@@ -77,9 +77,9 @@
    !--- of data and format etc., and filename.bin containing the data   
    !=============================================================================!
 
-   subroutine cable_diag1( Nvars, basename, dimx, dimy, timestep, node, vname1, var1 )
+   subroutine cable_diag1( x, Nvars, basename, dimx, dimy, timestep, node, vname1, var1 )
       implicit none
-      integer(i_d), intent(in) :: Nvars,dimx, dimy, timestep,node
+      integer(i_d), intent(in) :: x,Nvars,dimx, dimy, timestep,node
       real(r_1), intent(in), dimension(:) :: var1
       integer :: i=0
       character(len=*), intent(in) :: basename, vname1
Index: core/src/science/cable_canopy.F90
===================================================================
--- core/src/science/cable_canopy.F90	(revision 422)
+++ core/src/science/cable_canopy.F90	(working copy)
@@ -552,7 +552,7 @@
    subroutine latent_heat_flux() 
       use cable_common_module
       implicit none
-      real(r_1), dimension(mp) ::  swilt_eff, frescale
+      real(r_1), dimension(mp) ::  frescale
       real(r_1), dimension(mp) ::  flower_limit, fupper_limit
       integer :: j
 
@@ -565,13 +565,6 @@
          pwet = max(0.,min(0.2,ssoil%pudsto/max(1.,ssoil%pudsmx)))
          canopy%fess = canopy%fess * (1.-pwet)
 
-         !jhan: is this necessary anymore       
-         !--- decrease wilting point in UM 
-         if( cable_runtime%um) then
-               swilt_eff = soil%swilt/2.0    
-         else
-               swilt_eff = soil%swilt    
-         endif
          !jhan:NB %evapfbl
          !frescale = soil%zse(1) * 1000.  - ssoil%evapfbl(:,1) * air%rlam / dels         
          frescale = soil%zse(1) * 1000. * air%rlam / dels         
@@ -581,7 +574,7 @@
             if(ssoil%snowd(j) < 0.1 .and. canopy%fess(j) .gt. 0. ) then
 
                !flower_limit(j) = REAL(ssoil%wb(j,1),r_1)-soil%swilt(j)
-               flower_limit(j) = REAL(ssoil%wb(j,1),r_1)-swilt_eff(j)
+               flower_limit(j) = REAL(ssoil%wb(j,1),r_1)-soil%swilt(j)/2.0
                fupper_limit(j) = max(0._r_2,flower_limit(j)*frescale(j)-ssoil%evapfbl(j,1)*air%rlam(j)/dels)
                canopy%fess(j) = min(canopy%fess(j), fupper_limit(j))
                
@@ -951,7 +944,6 @@
       real(r_1), intent(in)               :: dels ! integration time setp (s)
       real(r_1),intent(in), dimension(:) :: cansat ! max canopy intercept. (mm)
       real(r_1), dimension(mp)  :: lower_limit, upper_limit,ftemp
-      real(r_1), dimension(mp) ::  swilt_eff
       integer :: j
 
          ! Rainfall variable is limited so canopy interception is limited,
@@ -972,18 +964,13 @@
          ! Add canopy interception to canopy storage term:
          canopy%cansto = canopy%cansto + canopy%wcint
      
-         if( cable_runtime%um) then
-               swilt_eff = soil%swilt/2.0
-         else
-               swilt_eff = soil%swilt
-         endif
 
          ! Calculate fraction of canopy which is wet:
          !jhan:rm hardwire
          canopy%fwet   = max(0.0,min(0.9,0.8*canopy%cansto/MAX(cansat,0.01)))
      
          ssoil%wetfac = MAX(1.e-6, MIN(1.0, &
-              (REAL(ssoil%wb(:,1),r_1) - swilt_eff) / (soil%sfc - swilt_eff)))
+              (REAL(ssoil%wb(:,1),r_1) -soil%swilt/2.0) / (soil%sfc - soil%swilt/2.0)))
         
             do j=1,mp
                if( ssoil%wbice(j,1) > 0. ) &
Index: core/src/science/cable_radiation.F90
===================================================================
--- core/src/science/cable_radiation.F90	(revision 422)
+++ core/src/science/cable_radiation.F90	(working copy)
@@ -124,6 +124,8 @@
       LOGICAL, DIMENSION(mp)    :: mask   ! select points for calculation
       REAL(r_1), DIMENSION(mp)  :: xx1,tssp   ! vegetation long-wave radiation (isothermal)
       integer, save :: call_number =0
+      REAL(r_2), DIMENSION(mp)  :: dummy2
+      REAL(r_2), DIMENSION(mp)  :: dummy
       REAL(r_1) s1,s2,s3,step
 
 
@@ -149,7 +151,10 @@
          END WHERE
 
     ! Define fraction of SW beam tranmitted through canopy:
-    rad%transb = EXP(-rad%extkb * canopy%vlaiw)
+    dummy2 = -rad%extkb * canopy%vlaiw
+    dummy = EXP(dummy2)
+    rad%transb = REAL(dummy, r_1)
+!    rad%transb = EXP(-rad%extkb * canopy%vlaiw)
 
     ! Define longwave from vegetation:
     !jhan: should we use tk or tvrad here    
